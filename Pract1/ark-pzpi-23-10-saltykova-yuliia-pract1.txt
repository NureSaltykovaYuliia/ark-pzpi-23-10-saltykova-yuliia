МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ 
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ


Кафедра «Програмної інженерії»



ЗВІТ
з практичної роботи
з дисципліни «Аналіз та рефакторінг коду»
на тему «Стандарти та документування коду відповідно до документації PHP-FIG, PHPDoc, та PHP.net для мови програмування PHP»

 

Виконала:
ст. гр. ПЗПІ-23-10
Салтикова Ю.М.

Перевірив:
старший викл. Кафедри ПІ
Сокорчук І.П.


Харків 2025

1 ІСТОРІЯ ЗМІН

№	Дата	Версія звіту	Опис змін та виправлень
1	24.10.2025	0.1	 Створено розділ “Завдання”
2	25.10.2025	0.1	Створено розділи: “Опис виконаної роботи”, “Висновок”, “Використані джерела”
3	26.10.2025	0.1	Створено розділи: “Додаток А”,“Додаток Б”,“Додаток В”


　　　　　2 ЗАВДАННЯ
　　　　　Мета роботи
　　　Метою моєї роботи було вивчення та усвідомлення значення єдиних стандартів оформлення і документування програмного коду мовою PHP. У роботі розглянуто основні принципи створення якісного, структурованого та зрозумілого програмного коду, який є зручним для читання, супроводу та подальшого розвитку.
　　　Особлива увага приділяється правилам форматування, правильному використанню відступів, структурі файлів і проєкту, логічному іменуванню змінних, функцій і класів, а також оформленню коментарів і документуванню коду. Дотримання цих правил є важливою складовою командної роботи, оскільки воно сприяє підвищенню якості програмного забезпечення, полегшує взаєморозуміння між розробниками та зменшує кількість помилок у процесі розробки. Крім того, метою роботи було дослідження ролі стандартів кодування у забезпеченні стабільності, підтримуваності та масштабованості програмних проєктів. Розуміння і дотримання цих принципів дозволяє створювати код, який відповідає сучасним вимогам до професійної розробки, є уніфікованим і зрозумілим незалежно від того, хто працює над проєктом.


　　　　　3 ОПИС ВИКОНАНОЇ РОБОТИ
　　　　　Хід Роботи
　　　1.Структура коду
　　　Структура коду є важливою складовою якісної розробки програм. Від правильної організації файлів і директорій залежить зрозумілість, підтримуваність та ефективність роботи з проєктом.
　　　У сучасних PHP-проєктах кожен клас розміщується в окремому файлі, а структура папок відповідає просторам імен (namespaces). Зазвичай головна директорія має назву src/, у якій знаходяться окремі папки для різних компонентів системи — наприклад, Controllers, Models, Services тощо (Див. додаток В.1). Такий підхід забезпечує порядок, полегшує пошук потрібних файлів і дає можливість використовувати автоматичне завантаження класів через Composer.
　　　Невпорядкована структура, коли всі файли зберігаються в одній папці та підключаються вручну, ускладнює роботу й призводить до помилок. Добре організована структура, навпаки, робить код зрозумілим, гнучким і зручним для командної розробки.
　　　Отже, правильно побудована структура коду забезпечує логічність, впорядкованість і легкість подальшого супроводу програмного продукту.
　　　



　　　　　
　　　
　　　
　　　2.Коментарі
　　　Коментарі є невід’ємною частиною якісного програмного коду, адже вони допомагають розробникам швидше розуміти логіку програми, спрощують супровід і подальше вдосконалення проєкту. Їх основне призначення — пояснення неочевидних рішень, складних алгоритмів або особливостей реалізації, які неможливо передати лише назвами змінних чи функцій.
　　　Коментарі доцільно використовувати для:
　　　1.Пояснення складної бізнес-логіки.
　　　2.Уточнення тимчасових рішень чи обхідних варіантів.
　　　3.Додавання позначок TODO або FIXME, які вказують на необхідність майбутніх змін або покращень у коді.
　　　Водночас не рекомендується залишати коментарі, які просто повторюють зміст коду, оскільки вони захаращують простір і не несуть корисної інформації (Див. додаток В.2).
　　　Хороші коментарі повинні надавати додатковий контекст, пояснювати “чому” певне рішення прийнято саме так, а не просто описувати “що” робить код. Крім того, коментарі можуть використовуватись для візуального розділення великих блоків коду — наприклад, групи методів у класі або логічних секцій програми, що покращує сприйняття структури файлу.
Таким чином, правильно оформлені та доречні коментарі роблять код більш зрозумілим, підтримуваним і професійним.
　　　　　3. Форматування коду
　　　Форматування коду відіграє важливу роль у забезпеченні його читабельності та зрозумілості. Єдиний стиль оформлення дозволяє розробникам швидко орієнтуватися в програмі, полегшує її підтримку та розвиток.
　　　Основна увага приділяється правильному використанню відступів, дужок і вирівнюванню коду. Зазвичай у PHP використовують відступ у чотири пробіли, що допомагає зберігати структуру та робить код більш впорядкованим. Для класів і методів відкривна дужка ставиться з нового рядка, а для умовних конструкцій — на тому ж рядку, що і сам оператор (Див. додаток В.3). Це забезпечує єдиний стиль і полегшує сприйняття логіки програми.
　　　Важливим є й обмеження довжини рядків, щоб код залишався зручним для читання навіть на невеликих екранах. Охайне та послідовне форматування допомагає уникати плутанини, робить код зрозумілим, структурованим і професійним, а також сприяє ефективній роботі в команді.
　　　　　4. Іменування
　　　Іменування є важливою частиною написання чистого та зрозумілого коду. Від того, наскільки вдало обрані назви змінних, функцій, класів і констант, залежить легкість розуміння програми іншими розробниками. Логічні та послідовні імена дозволяють швидко зрозуміти призначення елементів коду без додаткових пояснень.
　　　У PHP прийнято дотримуватися певних правил іменування. Для назв класів зазвичай використовується стиль UpperCamelCase, коли кожне слово починається з великої літери. Назви функцій і змінних пишуться у форматі camelCase, де перше слово починається з малої літери, а наступні — з великої. Константи, навпаки, записуються великими літерами з підкресленнями між словами (Див. додаток В.4).
　　　
　　　Послідовність у використанні стилів іменування робить код більш передбачуваним і зрозумілим. Недотримання цих правил призводить до плутанини, особливо у великих проєктах, де працює кілька розробників. Тому правильне іменування є не лише питанням стилю, а й важливою умовою підтримуваності та якості програмного продукту.
　　　　　5. Уникнення магічних чисел
　　　Одним із важливих принципів написання якісного коду є уникнення так званих «магічних чисел» — це числові значення, які з’являються в коді без пояснення їхнього призначення. Такі числа ускладнюють розуміння логіки програми, адже інший розробник або навіть автор через певний час може не згадати, що саме вони означають.
　　　Щоб зробити код більш зрозумілим і самодокументованим, замість неочевидних числових значень рекомендується використовувати іменовані константи. Такий підхід не лише підвищує читабельність коду, а й полегшує його зміну — достатньо змінити значення константи в одному місці, замість пошуку всіх появ числа у програмі.
　　　Використання іменованих констант сприяє кращому розумінню коду, зменшує кількість помилок і робить програму більш гнучкою та легкою для підтримки. Це один із найпростіших, але водночас найефективніших способів підвищення якості програмного коду.
　　　　　6. Документування коду
　　　Документування коду є невід’ємною частиною професійної розробки програмного забезпечення. Його головна мета — зробити програму зрозумілою не лише для автора, а й для інших розробників, які можуть працювати з цим кодом у майбутньому. Коментарі та спеціальні описи допомагають швидко розібратися в логіці роботи функцій, класів і методів, не витрачаючи час на детальне читання всієї реалізації.
　　　У PHP для документування зазвичай використовується формат PHPDoc — це спеціальні багаторядкові коментарі, які починаються з (/**) і містять теги для опису параметрів, типів даних та результатів функцій. Наприклад, теги (@param), (@return) та (@var) дозволяють чітко вказати, які дані приймає або повертає функція. Такі коментарі не лише покращують розуміння коду, а й використовуються середовищами розробки (IDE) для автоматичного підказування типів і структури коду.
　　　Документування допомагає уникати непорозумінь, забезпечує легкість у підтримці проєкту та є основою якісної командної роботи. Добре оформлений код із чіткими коментарями виглядає професійно, полегшує його перевірку, тестування та подальший розвиток.
　　　7. Інструменти та автоматизація
　　　Інструменти та автоматизація відіграють важливу роль у забезпеченні якості коду під час розробки на PHP. Для перевірки стилю та форматування використовуються спеціальні програми, які допомагають підтримувати єдиний стандарт у проєкті. Наприклад, PHP_CodeSniffer аналізує код і виявляє порушення стандартів, таких як PSR-12. PHP CS Fixer автоматично виправляє помилки форматування, а Prettier дозволяє форматувати код у різних мовах одночасно, забезпечуючи однаковий стиль у змішаних проєктах.
　　　Крім цього, важливим є використання інструментів статичного аналізу, які перевіряють код без його виконання. Вони допомагають знайти потенційні помилки, неточності у типах даних та логічні проблеми. Найпоширенішими серед них є PHPStan і Psalm, які особливо корисні у великих проєктах, а також SonarQube — система для комплексного аналізу якості, безпеки та технічного стану коду.
　　　8.Кодування на основі тестування (TDD)
　　　Кодування на основі тестування (TDD, або Test-Driven Development) — це підхід до розробки програмного забезпечення, при якому спочатку створюються тести, а вже потім пишеться код, що має ці тести успішно пройти. Такий метод дозволяє ще на ранніх етапах виявляти помилки, перевіряти правильність логіки та забезпечувати стабільність роботи програми.
　　　Процес TDD складається з трьох основних кроків, які постійно повторюються. Перший етап — Red (червоний): розробник пише тест для нової функції, але тест не проходить, оскільки сама функція ще не реалізована. Другий етап — Green (зелений): створюється мінімальний код, щоб тест почав працювати і проходив успішно. Третій етап — Refactor (рефакторинг): код покращується, очищається від зайвого, але тести при цьому повинні залишатися успішними. Такий підхід допомагає підтримувати чисту архітектуру і уникати накопичення помилок.
　　　Основним інструментом для реалізації TDD у PHP є PHPUnit — це бібліотека, яка дозволяє створювати та запускати модульні тести. Вона використовується для перевірки окремих частин програми, щоб переконатися, що кожен компонент працює правильно незалежно від інших.
　　　Переваги підходу TDD полягають у тому, що код стає більш надійним і передбачуваним, а розробка — структурованою. Розробники можуть швидко виявляти проблеми, вносити зміни без ризику зламати інші частини програми, а також отримують упевненість у якості свого продукту.
　　　Отже, кодування на основі тестування — це ефективний метод, який сприяє створенню стабільного, якісного та легкого у підтримці програмного забезпечення.


　　　　　4 ВИСНОВКИ
　　　У ході виконання роботи було розглянуто основні стандарти та рекомендації щодо написання якісного коду на мові програмування PHP. Особливу увагу приділено правилам оформлення, структурі коду, іменуванню змінних та класів, а також використанню коментарів і документації. Застосування цих принципів сприяє покращенню читабельності, зрозумілості та підтримуваності програмного продукту.
　　　Було розглянуто сучасні інструменти для автоматизації перевірки стилю, форматування та аналізу коду, які допомагають забезпечити його якість та відповідність стандартам. Також вивчено підхід кодування на основі тестування (TDD), який дозволяє створювати надійне програмне забезпечення завдяки попередньому тестуванню функціональності ще до її реалізації.
　　　Отже, дотримання стандартів, впровадження автоматизації та використання тестування є важливими складовими процесу створення сучасного, стабільного й якісного програмного забезпечення.


5 ВИКОРИСТАНІ ДЖЕРЕЛА
　　　1.PHP-FIG (PSR Standarts): Основне джерело стандартів PSR-1, PSR-4, PSR-12 та інших. URL: https://www.php-fig.org/psr/ (Дата звернення: 24.10.2025)
　　　2.PHP.net Documentation: Офіційна документація PHP. URL: https://www.php.net/manual/en/ (Дата звернення: 24.10.2025)
　　　3.PHPDoc Standart: Документація стандарту документування. URL: https://docs.phpdoc.org/ (Дата звернення: 24.10.2025)
　　　4.PHP The Right Way: Популярний та авторитетний ресурс, що збирає найкращі практики розробки на PHP. URL: https://phptherightway.com/(Дата звернення: 24.10.2025)
　　　5.Refactoring Guru: Інтерактивний посібник з патернів проєктування та рефакторингу з прикладами на PHP. URL: https://refactoring.guru/(Дата звернення: 24.10.2025)


ДОДАТОК А
Відеозапис
Відеозапис доповіді: https://youtu.be/4N3137Nn8_g
Хронологічний опис відеозапису:
0:00 - Вступ
0:56 - Організація проєкту та файлів
1:58 - Використання коментарів для структурування
2:54 - Відступи, вирівнювання та довжина рядків
3:38 - Правила іменування зі стандарту PSR-1
4:33 - Уникнкнення магічних чисел
5:12 - Документування коду в PHP
5:52 - Інструменти для перевірки та форматування стилю
6:32 - Кодування на основі тестування (TDD)
7:01 - Висновок
7:32 - Використані джерела



ДОДАТОК Б
Слайди презентації

Рисунок Б.1 – Титульний слайд

Рисунок Б.2 – Вступ: Важливість правил оформлення коду

Рисунок Б.3 –  Організація проєкту та файлів.

Рисунок Б.4 –  Використання коментарів для структурування

Рисунок Б.5 –  Відступи, вирівнювання та довжина рядків

Рисунок Б.6 –  Правила іменування зі стандарту PSR-1

Рисунок Б.7 –  Уникнення магічних чисел

Рисунок Б.7 – Документування коду за стандартом PHPDoc

Рисунок Б.8 – Інструменти для перевірки та форматування стилю

Рисунок Б.9 – Кодування на основі тестування(TDD)




Рисунок Б.9 – Висновок

Рисунок Б.10 – Використані джерела


ДОДАТОК В
Програмний код
В.1 Приклад оформлення програмного коду
GitHub репозиторій: https://github.com/NureSaltykovaYuliia/ark-pzpi-23-10-saltykova-yuliia/blob/main/Pract1/ark_pzpi-23-10-saltykova-yuliia-pract1/code-examples-code-conventions.php
1
2
3
4
5
6
7
8
9	// Приклад хорошого коду 
namespace MyProject\Repository;

use MyProject\Database\Connection;

class UserRepository
 {
    // …
 }
1
2
3
4
5
6	// Приклад поганого коду 
require_once 'db.php';
require_once 'user.php';

$db_connection = connect_to_db();
$user_data = get_user($db_connection, 1);




В.2 Приклад оформлення програмного коду
GitHub репозиторій: https://github.com/NureSaltykovaYuliia/ark-pzpi-23-10-saltykova-yuliia/blob/main/Pract1/ark_pzpi-23-10-saltykova-yuliia-pract1/code-examples-code-conventions.php
1
2
3
4	// Приклад поганого коментаря

// Збільшуємо лічильник на 1
$i++;



1
2
3
4
5
6	// Приклад хорошого коментаря

// Запускаємо перерахунок кешу після оновлення профілю,
// щоб користувач одразу побачив зміни.
$cache->recalculate();

В.3 Приклад оформлення програмного коду
GitHub репозиторій: https://github.com/NureSaltykovaYuliia/ark-pzpi-23-10-saltykova-yuliia/blob/main/Pract1/ark_pzpi-23-10-saltykova-yuliia-pract1/code-examples-code-conventions.php
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16	// Погане іменування
$user_data = ['name' => 'Alex']; // snake_case для змінної
const records_limit = 50; // нижній регістр для константи

class user_service // нижній регістр для класу
{

  public function GetUserData() // PascalCase для методу
  {
   // ...
  }

}
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12	// Гарне іменування
$userData = ['name' => 'Alex']; // camelCase для змінної
const RECORDS_LIMIT = 50; // SCREAMING_SNAKE_CASE для константи

class UserService // UpperCamelCase для класу
{

public function getUserData() : array // camelCase для методу
  {
     // ...
  }
}

В.4 Приклад оформлення програмного коду
GitHub репозиторій: https://github.com/NureSaltykovaYuliia/ark-pzpi-23-10-saltykova-yuliia/blob/main/Pract1/ark_pzpi-23-10-saltykova-yuliia-pract1/code-examples-code-conventions.php
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15	// Погане іменування
$user_data = ['name' => 'Alex']; // snake_case для змінної
const records_limit = 50; // нижній регістр для константи

class user_service // нижній регістр для класу
{

   public function GetUserData() // PascalCase для методу
   {
      // ...
   }
}

 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15	// Гарне іменування
$userData = ['name' => 'Alex']; // camelCase для змінної
const RECORDS_LIMIT = 50; // SCREAMING_SNAKE_CASE для константи

class UserService // UpperCamelCase для класу
{
  
   public function getUserData(): array // camelCase для методу
   {

   }
}
В.5 Приклад оформлення програмного коду
GitHub репозиторій: https://github.com/NureSaltykovaYuliia/ark-pzpi-23-10-saltykova-yuliia/blob/main/Pract1/ark_pzpi-23-10-saltykova-yuliia-pract1/code-examples-code-conventions.php
 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13	// Приклад поганого коду 
function calculateOrderTotal(int $quantity, int $userStatus): float
{
   $price = 9.99; // Що це за ціна?
   $total = $quantity * $price;

   // 3 - це статус преміум-користувача?
   if ($userStatus === 3) {
   $total *= 0.9; // 10% знижка
   }
   return $total;
} 

 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24	// Приклад хорошого коду  
class OrderCalculator
{

   private const BASE_PRICE = 9.99;
   private const PREMIUM_USER_STATUS = 3;
   private const PREMIUM_DISCOUNT = 0.9;

   public function calculateTotal(int $quantity, int $userStatus): float
   {

      $total = $quantity * self: :BASE_PRICE;

      if ($userStatus === self: :PREMIUM_USER_STATUS) {
      $total *= self :: PREMIUM_DISCOUNT;

      }

   return $total;

   }
}

В.6 Приклад оформлення програмного коду
GitHub репозиторій: https://github.com/NureSaltykovaYuliia/ark-pzpi-23-10-saltykova-yuliia/blob/main/Pract1/ark_pzpi-23-10-saltykova-yuliia-pract1/code-examples-code-conventions.php
1
2
3
4
5
6
7
8
9	// Приклад поганого коду 
function findUsers($search, $limit, $activeOnly)
{

// якийсь код для пошуку

return []; // що повертається? масив чого?

}

 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22	// Приклад хорошого коду  
/**
* Знаходить користувачів за заданим критерієм пошуку.
*
* @param string $search Рядок для пошуку (наприклад, ім'я або email).
* @param int $limit Максимальна кількість користувачів для повернення
* @param bool $activeOnly Повертати тільки активних користувачів
*
* @return User[] Масив об'єктів User.
*/

function findUsers(string $search, int $limit, bool $activeOnly): array
{
// ... логіка пошуку
return [];

}
В.7 Приклад оформлення програмного коду
GitHub репозиторій: https://github.com/NureSaltykovaYuliia/ark-pzpi-23-10-saltykova-yuliia/blob/main/Pract1/ark_pzpi-23-10-saltykova-yuliia-pract1/code-examples-code-conventions.php
1
2
3
4
5
6
7	// Спочатку тест
public function test_adds_two_numbers()
{
   $calculator = new Calculator();
   $result = $calculator->add(2, 3);
   $this->assertEquals(5, $result);
}

1
2
3
4
5
6
7
8	// Потім код
class Calculator
{
   public function add(int $a, int $b): int
   {
     return $a + $b;
   }
}













　　　


　　　　　
　　　
　　　　　

　　　
　　　
　　　
　　　
　　　
　　　
　　　
　　　
　　　　　

